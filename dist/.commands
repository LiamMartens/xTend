<?php
    namespace Application;
    use \RecursiveIteratorIterator;
    use \RecursiveDirectoryIterator;
    use xTend\Workbench;

    /**
    * Initializes the session keys
    */
    Workbench::register('^init$', function($argv) {
        $conf = Core\App::config()->file('Sessions.sessions.json');
        $session_config = json_decode($conf->read(), true);
        $session_config['sessionName'] = sha1(random_bytes(8));
        $session_config['initiatedKey'] = sha1(random_bytes(8));
        $session_config['userAgentKey'] = sha1(random_bytes(8));
        $session_config['salt'] = sha1(random_bytes(8));
        $session_config['userSessionsKey'] = sha1(random_bytes(8));
        $session_config['userCookiesKey'] = sha1(random_bytes(8));
        $conf->write(json_encode($session_config));
    }, 'application.init');

    /**
    * Shows the current application's session keys
    */
    Workbench::register('^init show$', function($argv) {
        $conf = Core\App::config()->file('Sessions.sessions.json');
        $session_config = json_decode($conf->read(), true);
        echo "\n"; foreach($session_config as $key => $value) {
            echo str_pad($key, 30).$value."\n";
        } echo "\n";
    }, 'application.init.show');

    /**
    * Shows the application routes
    * (those not under restrict)
    */
    Workbench::register('^routes$', function($argv) {
        $routes = Core\Router::all();
        foreach($routes as $route) {
            echo "/".$route->handle()."\t".$route."\n";
        }
    }, 'application.routes');

    /**
    * Adds a new application under a certain namespace
    */
    Workbench::register('^new ([a-zA-Z0-9\.]+) (.+) (.+)$', function($argv) {
        if($argv[3]=='any') { $argv[3]='*'; }
        if($argv[4]=='any') { $argv[4]='*'; }
        if(is_dir($argv[2])||isset(Workbench::get('applications')[$argv[2]])) {
            die("This application already exists\n");
        }
        //get the xTend master
        $latest = file_get_contents('https://xtend.liammartens.com/releases/latest.release');
        $zip=file_get_contents('https://xtend.liammartens.com/releases/'.$latest.'.zip');
        file_put_contents(__DIR__.'/xtend.zip', $zip);
        $zip=new \ZipArchive;
        $zip->open("xtend.zip");
        $zip->extractTo(__DIR__);
        //move the Application directory to the new application
        if(is_dir('xTend')) {
            rename('xTend/dist/Application', __DIR__.'/'.$argv[2]);
        } else { rename('xTend-'.$latest.'/dist/Application', __DIR__.'/'.$argv[2]); }
        //remove zip
        unlink('xtend.zip');
        //remove xTend-master
        $directory=new Objects\DirectoryHandler\Directory(__DIR__.'/xTend');
        if($directory->exists()) {
            $directory->remove();
        } else {
            $directory=new Objects\DirectoryHandler\Directory(__DIR__.'/xTend-'.$latest);
            $directory->remove();
        }
        //add to configuration
        Workbench::add($argv[2], $argv[3], $argv[4]);
        //add to index.php
        file_put_contents(__DIR__.'/'.Workbench::get('public').'/index.php', '
    namespace '.str_replace('.', '\\', $argv[2]).' {
        global $matched_application;
        if(__NAMESPACE__==$matched_application) {
            Core\App::start(__DIR__);
            Core\FileHandler::system(\'Config.App.App.php\')->include();
            Core\App::configuration([]);
            Core\App::run();
        }
    }
        ', FILE_APPEND);
        //replac all xTend\Application namespaces to the new application
        foreach(new RecursiveIteratorIterator(new RecursiveDirectoryIterator($argv[2])) as $file) {
            if(!is_file($file)) continue;
            $contents=file_get_contents($file);
            $contents=preg_replace('/namespace Blog;/',
                                    'namespace '.str_replace('.', '\\', $argv[2]).';',
                                    $contents);
            $contents=preg_replace('/use Application\\((?:.+?\\)(?:.+?));/', 
                                    'namespace '.str_replace('.', '\\', $argv[2]).'\\$1;',
                                    $contents);
            file_put_contents($file, $contents);
        }
    }, 'new.application');

    /**
    * Removes an application
    */
    Workbench::register('^remove ([a-zA-Z0-9\.]+)$', function($argv) {
        if(!is_dir($argv[2])||!isset(Workbench::get('applications')[$argv[2]])) { die("The application does not exist\n"); }
        if($argv[2]==self::get('application')) { die("You can't remove the current workbench application\n"); }
        //remove app dir
        $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($argv[2], RecursiveDirectoryIterator::SKIP_DOTS),
                     RecursiveIteratorIterator::CHILD_FIRST);
        foreach($files as $file) {
            if ($file->isDir()){
                rmdir($file->getRealPath());
            } else {
                unlink($file->getRealPath());
            }
        }
        rmdir($argv[2]);
        //remove from configuration
        Workbench::remove($argv[2]);
        //remove from index.php
        $contents=file_get_contents(Workbench::get('public').'/index.php');
        $contents=preg_replace('/namespace '.str_replace('.', '\\\\', $argv[2]).' \{.+?\}.+?\}/s',
                                '', $contents);
        file_put_contents(Workbench::get('public').'/index.php', $contents);
    }, 'remove.application');

    /**
    * Sets the workbench application
    */
    Workbench::register('^set:application ([a-zA-Z0-9\.]+)', function($argv) {
        if(!is_dir($argv[2])||!isset(Workbench::get('applications')[$argv[2]])) { die("The application does not exist\n"); }
        Workbench::application($argv[2]);
    }, 'set.application');

    /**
    * Sets the public directory
    */
    Workbench::register('^set:public ([a-zA-Z0-9\.]+)$', function($argv) {
        Workbench::public($argv[2]);
    });

    /**
    * Creates a new controller which extends the Controller blueprint
    */
    Workbench::register('^new:controller ([a-zA-Z0-9\_\.]+)$', function($argv) {
        $dot_pos = strrpos($argv[2], '.');
        $ns_suffix='';
        $class_name=$argv[2];
        if($dot_pos!==false) {
            $dir = Core\App::controllers()->directory(substr($argv[2], 0, $dot_pos));
            if(!$dir->exists()) {
                $dir->create();
            }
            $class_name=substr($argv[2], $dot_pos+1);
        }
        $controller = Core\App::controllers()->file($argv[2].'.php');
        $controller->write('<?php
    namespace '.Workbench::get('application').';
    class '.$class_name.' extends Blueprints\\Controller {

    }'
        );
    });

    /**
    * Creates a empty controller which doesn't inherit the controller class
    */
    Workbench::register('^new:controller ([a-zA-Z0-9\_\.]+) empty$', function($argv) {
        $dot_pos = strrpos($argv[2], '.');
        $ns_suffix='';
        $class_name=$argv[2];
        if($dot_pos!==false) {
            $dir = Core\App::controllers()->directory(substr($argv[2], 0, $dot_pos));
            if(!$dir->exists()) {
                $dir->create();
            }
            $class_name=substr($argv[2], $dot_pos+1);
        }
        $controller = Core\App::controllers()->file($argv[2].'.php');
        $controller->write('<?php
    namespace '.Workbench::get('application').';
    class '.$class_name.' {

    }'
        );
    });

    /**
    * Creates a new controller which inherits the RespondController
    */
    Workbench::register('^new:respondcontroller ([a-zA-Z0-9\_\.]+)$', function($argv) {
        $dot_pos = strrpos($argv[2], '.');
        $ns_suffix='';
        $class_name=$argv[2];
        if($dot_pos!==false) {
            $dir = Core\App::controllers()->directory(substr($argv[2], 0, $dot_pos));
            if(!$dir->exists()) {
                $dir->create();
            }
            $class_name=substr($argv[2], $dot_pos+1);
        }
        $controller = Core\App::controllers()->file($argv[2].'.php');
        $controller->write('<?php
    namespace '.Workbench::get('application').';
    class '.$class_name.' extends Blueprints\\RespondController {
        //The RespondController adds a protected method called respond
        //which you can use to return JSON data with a success parameter (boolean)
        //a status parameter with a code, hex code, status name and status message
        //and a data parameter which you can use to pass extra data
        //all info about the RespondController can be found in the documentation
    }'
        );
    });

    /**
    * Creates a new model which inherits the initiated blueprint Model
    */
    Workbench::register('^new:model ([a-zA-Z0-9\_\.]+)$', function($argv) {
        $dot_pos = strrpos($argv[2], '.');
        $ns_suffix='';
        $class_name=$argv[2];
        if($dot_pos!==false) {
            $dir = Core\App::models()->directory(substr($argv[2], 0, $dot_pos));
            if(!$dir->exists()) {
                $dir->create();
            }
            $class_name=substr($argv[2], $dot_pos+1);
        }
        $controller = Core\App::models()->file($argv[2].'.php');
        $controller->write('<?php
    namespace '.Workbench::get('application').';
    class '.$class_name.' extends Blueprints\\Model {
        protected $_table = \''.str_replace('.', '_', $argv[2]).'\';
        protected $_id_column = \'id\';
    }'
        );
    });

    /**
    * Creates a new model which doesn't inherit the blueprint
    */
    Workbench::register('^new:model ([a-zA-Z0-9\_\.]+) empty$', function($argv) {
        $dot_pos = strrpos($argv[2], '.');
        $ns_suffix='';
        $class_name=$argv[2];
        if($dot_pos!==false) {
            $dir = Core\App::models()->directory(substr($argv[2], 0, $dot_pos));
            if(!$dir->exists()) {
                $dir->create();
            }
            $class_name=substr($argv[2], $dot_pos+1);
        }
        $controller = Core\App::models()->file($argv[2].'.php');
        $controller->write('<?php
    namespace '.Workbench::get('application').';
    class '.$class_name.' {

    }'
        );
    });

    /**
    * Creates a new basic layout
    */
    Workbench::register('^new:layout ([a-zA-Z0-9\_\.]+)$', function($argv) {
        $dot_pos = strrpos($argv[2], '.');
        if($dot_pos!==false) {
            $dir = Core\App::layouts()->directory(substr($argv[2], 0, $dot_pos));
            if(!$dir->exists()) {
                $dir->create();
            }
        }
        $layout = Core\App::layouts()->file($argv[2].'.wow.php', 2);
        if(Core\Wow::flavor()==Core\Wow::AT_SIGN) {
            $layout->write('<!DOCTYPE html>
<html>
    <head>
        @section:head
    </head>
    <body>
        @section:body
    </body>
</html>'
            );
        } else {
            $layout->write('<!DOCTYPE html>
<html>
    <head>
        <section name="head" />
    </head>
    <body>
        <section name="body" />
    </body>
</html>'
            );
        }
    });

    /**
    * Create a new empty view
    */
    Workbench::register('^new:view ([a-zA-Z0-9\_\.]+)$', function($argv) {
        $dot_pos = strrpos($argv[2], '.');
        if($dot_pos!==false) {
            $dir = Core\App::views()->directory(substr($argv[2], 0, $dot_pos));
            if(!$dir->exists()) {
                $dir->create();
            }
        }
        $view = Core\App::views()->file($argv[2].'.wow.php', 2);
        if(Core\Wow::flavor()==Core\Wow::AT_SIGN) {
            $view->write('@version:1
@compile:change+version'
            );
        } else {
            $view->write('<version value="1" />
<compile value="change+version" />'
            );
        }
    });

    /**
    * Creates a new view which extends a layout
    */
    Workbench::register('^new:view ([a-zA-Z0-9\_\.]+) ([a-zA-Z0-9\_\.]+)$', function($argv) {
        if(!Core\App::layouts()->file($argv[3].'.wow.php', 2)->exists()) { die('Layout does not exist'); }
        $dot_pos = strrpos($argv[2], '.');
        if($dot_pos!==false) {
            $dir = Core\App::views()->directory(substr($argv[2], 0, $dot_pos));
            if(!$dir->exists()) {
                $dir->create();
            }
        }
        $view = Core\App::views()->file($argv[2].'.wow.php', 2);
        if(Core\Wow::flavor()==Core\Wow::AT_SIGN) {
            $view->write('@version:1
    @layout:'.$argv[3].'
    @compile:change+version'
            );
        } else {
            $view->write('<version ="1" />
<compile value="change+version" />
<layout value="'.$argv[3].'" />');
        }
    });

    /**
    * Lists the application configuration
    */
    Workbench::register('^config$', function($argv) {
        $conf = Core\App::config()->file('App.Configuration.json');
        $configuration = json_decode($conf->read(), true);
        echo "\n"; foreach($configuration as $key => $value) {
            echo str_pad($key, 30).(is_bool($value) ? ($value ? 'true' : 'false') : $value)."\n";
        } echo "\n";
    });

    /**
    * Sets a configuration value
    */
    Workbench::register('^config ([a-zA-Z]+) (.*)$', function($argv) {
        $conf = Core\App::config()->file('App.Configuration.json');
        $configuration = json_decode($conf->read(), true);
        if(isset($configuration[$argv[2]])) {
            if(($argv[3]==='true')||($argv[3]==='false')) { $argv[2]=boolval($argv[3]); }
            elseif(is_numeric($argv[3])) { $argv[2]=intval($argv[3]); }
            $configuration[$argv[2]] = $argv[3];
            $conf->write(json_encode($configuration));
        } else { die("Configuration key not found\n"); }
    });

    /**
    * Shows the value of a config variable
    */
    Workbench::register('config ([a-zA-Z]+)$', function($argv) {
        $conf = Core\App::config()->file('App.Configuration.json');
        $configuration = json_decode($conf->read(), true);
        if(isset($configuration[$argv[2]])) {
            echo $configuration[$argv[2]]."\n";
        } else { die("Configuration key not found\n"); }
    });

    /**
    * Sets the wow flavor
    */
    Workbench::register('wow:flavor (HTML|AT_SIGN|COMBINED)', function($argv) {
        $file = Core\App::config()->file('Wow.Flavor.php');
        $file->write('<?php
    /**
    * Sets the current Wow flavor
    * and initializes the Wow engine
    */
    namespace '.Workbench::get('application').';
    use '.Workbench::get('application').'\Core\Wow;
    Wow::flavor(Wow::'.$argv[2].');
    Wow::start();'
        );
    });

    /**
    * Installs or updates a package
    */
    Workbench::register('packagist:(install|update) ([a-zA-Z0-9\-\_]+)\/([a-zA-Z0-9\-\_]+)$', function($argv) {
        $package_name = $argv[2];
        if(Core\PackagistHandler::install($package_name)) {
            die("Installed $package_name\n");
        }
        die("No suitable version was found for $package_name\n");
    });

    /**
    * Installs a new package of a specific version
    */
    Workbench::register('packagist:install ([a-zA-Z0-9\-\_]+)\/([a-zA-Z0-9\-\_]+) (.+)$', function($argv) {
        $package_name = $argv[2];
        $package_version = $argv[3];
        if(Core\PackagistHandler::install($package_name, $package_version)) {
            die("Installed $package_name\n");
        }
        die("No suitable version was found for $package_name\n");
    });

    /**
    * Installs all packages in package.json
    */
    Workbench::register('^packagist:install', function($argv) {
        //to install or update all packages
        $packages = Core\PackagistHandler::packages();
        foreach($packages as $package => $version) {
            Core\PackagistHanlder::install($package, $version, false);
        }
    });

    /**
    * Removes a certain package
    */
    Workbench::register('^packagist:remove ([a-zA-Z0-9\-\_]+)\/([a-zA-Z0-9\-\_]+)$', function($argv) {
        $package_name = $argv[2];
        if(Core\PackagistHandler::remove($package_name)) {
            die("Removed $package_name\n");
        }
        die("Couldn't remove $package_name, maybe it wasn't installed?\n");
    });

    /**
    * Autoremoves a certain package
    */
    Workbench::register('^packagist:autoremove ([a-zA-Z0-9\-\_]+)\/([a-zA-Z0-9\-\_]+)$', function($argv) {
        $package_name = $argv[2];
        if(Core\PackagistHandler::autoremove($package_name)) {
            die("Autoremoved $package_name\n");
        }
        die("Couldn't autoremove $package_name\n");
    });

    /**
    * Autoremoves a certain package of a certain version
    */
    Workbench::register('^packagist:autoremove ([a-zA-Z0-9\-\_]+)\/([a-zA-Z0-9\-\_]+) (.+)$', function($argv) {
        $package_name = $argv[2];
        if(Core\PackagistHandler::autoremove($package_name, $argv[3])) {
            die("Autoremoved $package_name\n");
        }
        die("Couldn't autoremove $package_name\n");
    });

    //===========================================//
    Workbench::register('^help', function($argv) {
        $help = [
            "init" => "Initializes xTend with secure keys",
            "init show" => "Shows the application's keys",
            "config" => "Prints out the configuration values",
            "config [Key] [Value]" => "Sets an application configuration variable, such as\n\tUrl, DevelopmentStatus, BackupInterval, BackupLimit, LogLimit and Environment",
            "config [Key]" => "Gets an application configuration variable",
            "wow:flavor [HTML, AT_SIGN or COMBINED flavor]" => "Sets the flavor of the Wow templating engine (COMBINED by default)",
            "routes" => "Displays the routes of the currently selected application (only those NOT under a restrict)",
            "new [AppName] [Host or any] [Path or any]" => "Creates a new empty application starting from the current public directory. Can be useful when you have multiple sites in 1 project.",
            "remove [AppName]" => "Removes an application. Make sure you don't try to remove the currently selected application",
            "set:application [AppName]" => "Selects an application",
            "set:public [PublicDirectory]" => "Sets the public directory",
            "new:controller [ControllerName]" => "Creates a new controller. Example:\n\tnew:controller Main.HomeController - will create a controller in Controllers/Main called HomeController.php",
            "new:controller [ControllerName] empty" => "Creates a new controller which  does not inherit the Controller blueprint",
            "new:respondcontroller [ControllerName]" => "Creates a new controller which extends the BaseRespondController. Can be useful for creating an API controller",
            "new:model [ModelName]" => "Creates a new model. Example:\n\tnew:model Api.User - will create a model in Models/Api called User.php",
            "new:model [ModelName] empty" => "Creates a new model which doesn't extend the Model blueprint",
            "new:layout [LayoutName]" => "Creates a new basic layout",
            "new:view [ViewName]" => "Creates a new basic view",
            "new:view [ViewName] [LayoutName]" => "Creates a new basic view which extends a layout",
            "packagist:install [Vendor/Package]" => "Installs a packagist package",
            "packagist:install [Vendor/Package] [Version]" => "Installs a packagist package of a certain version. (Supports packagist's version conditions such as ^ and ~)",
            "packagist:remove [Vendor/Package]" => "Removes a package from your application",
            "packagist:install" => "Automatically installs all packages in your packagist.json file",
            "packagist:autoremove [Vendor/Package]" => "Automatically removes 'require' packages",
            "packagist:autoremove [Vendor/Package] [Version]" => "Automatically removes 'require' packages"
        ];

        $command_match=[]; $match_percent=0;
        foreach($help as $cm => $info) {
            $command_text = preg_replace('/(\s*|\:)\[.+?\](\s*|\:)/', '', $cm);
            $command_parts = substr_count($command_text, ' ')+1;
            $argument = implode(' ', array_slice($argv, 1, $command_parts));
            $percent=0; similar_text($command_text, $argument, $percent);
            if($percent>50) {
                $command_match[]=$cm;
            }
        }

        if(count($command_match)>0) {
            echo "\nDid you mean one of these: \n";
            foreach($command_match as $command) {
                echo $command."\n";
            }
        } else {
            echo "xTend CLI\n";
            foreach($help as $cm => $info) {
                echo "$cm\n  $info\n\n";
            }   
        }
        echo "\n";
    }, 'help');