<?php
    use xTend\Workbench\Workbench as Workbench;
    use xTend\Workbench\Helpers as Helpers;
    Workbench::registerCommand('init', function($app) {
        $conf = $app->getFileHandler()->system("Config.Sessions.Sessions.json");
        $session_config = Helpers::json($conf->read());
        $session_config["SessionName"] = Helpers::generate();
        $session_config["InitiatedKey"] = Helpers::generate();
        $session_config["UserAgentKey"] = Helpers::generate();
        $session_config["Salt"] = Helpers::generate();
        $session_config["UserSessionsKey"] = Helpers::generate();
        $session_config["UserCookiesKey"] = Helpers::generate();
        $conf->write(Helpers::json($session_config));
    }, 'application.init');

    Workbench::registerCommand('routes', function($app) {
        $routes = $app->getRouter()->getRoutes();
        foreach($routes as $route) {
            echo "/".$route->getHandle()."\t".$route."\n";
        }
    }, 'application.routes');

    Workbench::registerCommand('new ([a-zA-Z0-9\.]+):(.+):(.+)', function($app, $argv) {
        $args = explode(":", $argv[2]);
        $argv[2]=$args[0];
        $argv[]=$args[1];
        $argv[]=$args[2];
        if(is_dir($argv[2])||array_key_exists($argv[2], Workbench::getConfiguration('applications'))) {
            die("This application already exists\n");
        }
        //get the xTend master
        $zip=file_get_contents('https://github.com/LiamMartens/xTend/archive/master.zip');
        file_put_contents("master.zip", $zip);
        $zip=new \ZipArchive;
        $zip->open("master.zip");
        $zip->extractTo(__DIR__);
        //move the system directory to the new application
        rename("xTend-master/dist/System", __DIR__."/".$argv[2]);
        //remove zip
        unlink('master.zip');
        //remove xTend-master
        $directory=new \xTend\Core\DirectoryHandler\Directory($app, __DIR__."/xTend-master");
        $directory->remove();
        //add to configuration
        Workbench::addApplication($argv[2], $argv[3], $argv[4]);
        //add to index.php
        $file=$app->getFileHandler()->public(Workbench::getConfiguration('public').'.index.php');
        $file->append('
    namespace '.str_replace('.', '\\', $argv[2]).' {
        use \xTend\Workbench\Workbench as Workbench;
		Workbench::setNamespace(__NAMESPACE__);
        global $matched_application;
	    if(__NAMESPACE__==$matched_application) {
			$app=\xTend\Core\createNewApp(__NAMESPACE__, __DIR__);
		    $app->getFileHandler()->system("Config.App.App.php")->include();
		    $app->run();
		}
    }
        ');
        //replac all xTend\Application namespaces to the new application
        foreach(new RecursiveIteratorIterator(new RecursiveDirectoryIterator($argv[2])) as $file) {
            if(!is_file($file)) continue;
            $contents=file_get_contents($file);
            $contents=preg_replace('/namespace xTend\\\\Application;/',
                                    'namespace '.str_replace('.', '\\', $argv[2]).';',
                                    $contents);
            file_put_contents($file, $contents);
        }
    }, 'new.application');

    Workbench::registerCommand('remove ([a-zA-Z0-9\.]+)', function($app, $argv) {
        if(!is_dir($argv[2])||!array_key_exists($argv[2], Workbench::getConfiguration('applications'))) { die("The application does not exist\n"); }
        if($argv[2]==self::getConfiguration('application')) { die("You can't remove the current workbench application\n"); }
        //remove app dir
        $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($argv[2], RecursiveDirectoryIterator::SKIP_DOTS),
                     RecursiveIteratorIterator::CHILD_FIRST);
        foreach($files as $file) {
            if ($file->isDir()){
                rmdir($file->getRealPath());
            } else {
                unlink($file->getRealPath());
            }
        }
        rmdir($argv[2]);
        //remove from configuration
        Workbench::removeApplication($argv[2]);
        //remove from index.php
        $contents=file_get_contents(Workbench::getConfiguration('public').'/index.php');
        $contents=preg_replace('/namespace '.str_replace('.', '\\\\', $argv[2]).' \{.+?\}.+?\}/s',
                                '', $contents);
        file_put_contents(Workbench::getConfiguration('public').'/index.php', $contents);
    }, 'remove.application');

    //setters
    Workbench::registerCommand('set:application ([a-zA-Z0-9\.]+)', function($app, $argv) {
        if(!is_dir($argv[2])||!array_key_exists($argv[2], Workbench::getConfiguration('applications'))) { die("The application does not exist\n"); }
        Workbench::setApplication($argv[2]);
        $contents=file_get_contents("workbench");
        $contents=preg_replace('/namespace [a-zA-Z0-9\\\\]+;/',
                                'namespace '.str_replace('.', '\\', $argv[2]).';',
                                $contents);
        file_put_contents("workbench", $contents);
    }, 'set.application');

    Workbench::registerCommand('set:public ([a-zA-Z0-9\.]+)', function($app, $argv) {
        if(!is_dir($argv[2])||!is_file($argv[2]."/index.php")) { die("Unable to find index.php in public directory"); }
        Workbench::setPublic($argv[2]);
    });


    //===========================================//
    Workbench::registerCommand('help', function() {
        $help = [
            "init" => "Initializes xTend with secure keys",
            "routes" => "Displays the routes of the currently selected application (only those NOT under a restrict)",
            "new [AppName]:[Host or *]:[PathRegex]" => "Creates a new empty application starting from the current public directory. Can be useful when you have multiple sites in 1 project.",
            "remove [AppName]" => "Removes an application. Make sure you don't try to remove the currently selected application",
            "set:application [AppName]" => "Selects an application",
            "set:public [PublicDirectory]" => "Sets the public directory"
        ];

        echo "xTend CLI\n";
        foreach($help as $cm => $info) {
            echo "$cm\n  $info\n\n";
        }
        echo "\n";
    }, 'help');
